{"version":3,"sources":["App.js","Hooks/UseInput.js","reportWebVitals.js","index.js"],"names":["web3","createAlchemyWeb3","require","process","contract","contractAddress","NFTContract","eth","Contract","abi","App","useState","walletAddress","setWallet","initialValue","value","setValue","reset","bind","onChange","event","target","useInput","currentAccount","handleAccountsChanged","accounts","length","alert","console","log","useEffect","a","window","ethereum","request","method","then","res","catch","err","code","error","getCurrentWalletConnected","connectWallet","isMainnet","chainId","networkVersion","parseInt","mintNFT","tokenURI","addressFrom","getTransactionCount","nonce","tx","utils","toWei","methods","publicMint","encodeABI","getAccounts","sendTransaction","transactionHash","mintClick","fetch","headers","body","JSON","stringify","wish","json","data","hash","metadataHash","className","src","alt","onClick","type","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ace934b7.chunk.js","sourcesContent":["import { useInput } from \"./Hooks/UseInput\";\nimport { useEffect, useState } from \"react\";\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contract = require(\"./artifacts/contracts/HandValentine.sol/HandValentine.json\")\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\nconst NFTContract = new web3.eth.Contract(contract.abi, contractAddress);\n\nfunction App() {\n  \n  const [walletAddress, setWallet] = useState(\"\");\n  let { value, bind, reset } = useInput(\"Type some lovely words here <3\");\n\n  let currentAccount = null;\n  \n  const server_url = \"http://localhost:8080\";\n\n  useEffect(() => {\n    async function getCurrentWalletConnected () {\n      if (window.ethereum) {\n        window.ethereum.request({method: \"eth_accounts\"})\n        .then((res) => {\n          if (res.length > 0) {\n            handleAccountsChanged(res)\n          }\n        }).catch((err) => {\n          if (err.code === 4001) {\n            alert('Please connect to metamask!')\n          } else {\n            console.error(err)\n          }\n        })\n      } else { alert(\"Install metamask extension!\")}\n    };\n    getCurrentWalletConnected()\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  function handleAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      alert('Please connect to MetaMask!');\n    } else if (accounts[0] !== currentAccount) {\n      currentAccount = accounts[0]\n      setWallet(currentAccount)\n      console.log(\"Wallet connected: \", walletAddress);\n    }\n  }\n  \n  const connectWallet = async () => {\n    if (isMainnet()) {\n      if(window.ethereum) {\n        window.ethereum.request({method:'eth_requestAccounts'})\n        .then(res => handleAccountsChanged(res))\n        .catch((err) => {\n          if (err.code === 4001) {\n            alert('Please connect to metamask!')\n          } else {\n            console.error(err)\n          }\n        });\n      } else {\n        alert(\"Install metamask extension!\")\n      }\n    }\n  };\n\n  function isMainnet() {\n    let chainId = window.ethereum.networkVersion\n    if (parseInt(chainId) === 4) { // 4 = rinkeby, 1 = mainnet\n      return true;\n    } else {\n      alert(\"Please connect your Web3 to mainnet network!\")\n      return false;\n    }\n  };\n\n  const mintNFT = async(tokenURI) => {      \n    const addressFrom = walletAddress;\n    const nonce = await web3.eth.getTransactionCount(addressFrom, 'latest'); \n    const tx = {\n      'from': addressFrom,\n      'to': contractAddress,\n      'nonce': nonce,\n      'gas': 300000,\n      'value': web3.utils.toWei('0.02', 'ether'),\n      'data': NFTContract.methods.publicMint(tokenURI).encodeABI()    // make call to smart contract \n    }\n\n    web3.eth.getAccounts().then(accounts => {\n      web3.eth.sendTransaction(tx, \n        function(err, transactionHash) {\n          if (!err){\n            alert(\"Homo successfully minted! \")\n            console.log(\"Transaction hash:\", transactionHash)\n          } else {\n            alert(\"Something went wrong. Try again!\")\n            console.log(err);\n          }\n        })\n    })\n}\n\n  const mintClick = async () => {\n    let hash;\n    console.log(\"Input: \", value);\n\n    // draw image and upload \n    await fetch(`${server_url}/mint`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({wish: value})\n    }).then((res) => res.json())\n      .then((data) => {hash = data.metadataHash})\n      .catch((err) => console.log(err))\n\n      // mint\n      if (hash && isMainnet()) {\n        await mintNFT(hash);\n      }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <img src=\"/logo.png\" className=\"header__logo\" alt=\"logo\" />\n        <img\n          src=\"/metamask.png\"\n          className=\"header__metamask\"\n          alt=\"metamask\"\n          onClick={connectWallet}\n        />\n      </header>\n\n      <div className=\"input\">\n        <img src=\"/heart.png\" className=\"input__heart\" alt=\"heart\" />\n        <textarea type=\"text\" {...bind} className=\"input__controller\" onClick={reset}/>  \n        <img\n          src=\"/send-love-btn.png\"\n          onClick={mintClick}\n          className=\"input__btn\"\n          alt=\"input btn\"\n        />\n        <img\n          src=\"/kanye-types.png\"\n          className=\"input__types\"\n          alt=\"kanye-types\"\n        />\n      </div>\n\n      <footer className=\"footer\">\n        <img src=\"/torn-paper-big.png\" className=\"footer__bg\" alt=\"footer bg\" />\n        <img\n          src=\"/freemint-type.png\"\n          className=\"footer__info\"\n          alt=\"footer info\"\n        />\n        <div className=\"socials\">\n          <a href=\"https://twitter.com/nicedaybruh\" target=\"_blank\" className=\"socials__link\">\n            <img src=\"/twitter.png\" alt=\"twitter\" />\n          </a>\n          <a href=\"https://discord.gg/238RHdQA3G\" target=\"_blank\" className=\"socials__link\">\n            <img src=\"/discord.png\" alt=\"discord\" />\n          </a>\n          <a href=\"#\" target=\"_blank\" className=\"socials__link\">\n            <img src=\"/opensea.png\" alt=\"opensea\" />\n          </a>\n          <a href=\"#\" target=\"_blank\" className=\"socials__link\">\n            <img src=\"/instagram.png\" alt=\"instagram\" />\n          </a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","import { useState } from \"react\";\n\nexport const useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event) => {\n        setValue(event.target.value);\n      },\n    },\n  };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Main.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./Reset.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}